/* translation of file(s)
	"abstract.k"
	"unparse.k"
	"rewrite.k"
 */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.11 (C) 1998-2007 Humboldt-University of Berlin $
 */
#define KC_REWRITE

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include "k.h"
#include "rk.h"


namespace kc {
base_rview_class base_rview;
simplify_class simplify;

impl_rviews rviews[] = {
    {"base_rview",&base_rview},
    {"simplify",&simplify},
    {0,0}
};

} // namespace kc

namespace kc {

#ifndef KC_TRACE_PROVIDED
#define KC_TRACE_PROVIDED(COND,FILE,LINE,NODE) COND
#endif
#ifndef KC_TRACE_REWRITE_MATCH
#define KC_TRACE_REWRITE_MATCH(VIEW,FILE,LINE,NODE)
#endif
#ifndef KC_TRACE_REWRITE_RESULT
#define KC_TRACE_REWRITE_RESULT(VIEW,FILE,LINE,NODE)
#endif

net impl_net_Net::rewrite(rview kc_current_view_base)
{
    netName l_netName_1 =
	netName_1->rewrite(kc_current_view_base);
    definitionsList l_definitionsList_1 =
	definitionsList_1->rewrite(kc_current_view_base);
    places l_places_1 =
	places_1->rewrite(kc_current_view_base);
    marking l_marking_1 =
	marking_1->rewrite(kc_current_view_base);
    transition l_transition_1 =
	transition_1->rewrite(kc_current_view_base);
    if ((l_netName_1 == netName_1) &&  (l_definitionsList_1 == definitionsList_1) &&  (l_places_1 == places_1) &&  (l_marking_1 == marking_1) &&  (l_transition_1 == transition_1))
	return this;
    else {
	impl_net_Net* kc_result= Net(l_netName_1, l_definitionsList_1, l_places_1, l_marking_1, l_transition_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

netName impl_netName_NetName::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_netName_NetName* kc_result= NetName(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

netName impl_netName_EmptyNetName::rewrite(rview kc_current_view_base)
{
    return this;

}

definitionsList impl_definitionsList_DefinitionsList::rewrite(rview kc_current_view_base)
{
    definitionsList l_definitionsList_1 =
	definitionsList_1->rewrite(kc_current_view_base);
    definitions l_definitions_1 =
	definitions_1->rewrite(kc_current_view_base);
    if ((l_definitionsList_1 == definitionsList_1) &&  (l_definitions_1 == definitions_1))
	return this;
    else {
	impl_definitionsList_DefinitionsList* kc_result= DefinitionsList(l_definitionsList_1, l_definitions_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

definitionsList impl_definitionsList_EmptyDefinitionsList::rewrite(rview kc_current_view_base)
{
    return this;

}

definitions impl_definitions_DefConstant::rewrite(rview kc_current_view_base)
{
    constant l_constant_1 =
	constant_1->rewrite(kc_current_view_base);
    if ((l_constant_1 == constant_1))
	return this;
    else {
	impl_definitions_DefConstant* kc_result= DefConstant(l_constant_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

definitions impl_definitions_DefFunction::rewrite(rview kc_current_view_base)
{
    function l_function_1 =
	function_1->rewrite(kc_current_view_base);
    if ((l_function_1 == function_1))
	return this;
    else {
	impl_definitions_DefFunction* kc_result= DefFunction(l_function_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

definitions impl_definitions_DefSort::rewrite(rview kc_current_view_base)
{
    sort l_sort_1 =
	sort_1->rewrite(kc_current_view_base);
    if ((l_sort_1 == sort_1))
	return this;
    else {
	impl_definitions_DefSort* kc_result= DefSort(l_sort_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

sort impl_sort_Sort::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    arrayList l_arrayList_1 =
	arrayList_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_casestring_1 == casestring_1) &&  (l_arrayList_1 == arrayList_1))
	return this;
    else {
	impl_sort_Sort* kc_result= Sort(l_type_1, l_casestring_1, l_arrayList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type impl_type_TypeMultiset::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1))
	return this;
    else {
	impl_type_TypeMultiset* kc_result= TypeMultiset(l_type_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type impl_type_TypeInt::rewrite(rview kc_current_view_base)
{
    return this;

}

type impl_type_TypeStruct::rewrite(rview kc_current_view_base)
{
    structTypeList l_structTypeList_1 =
	structTypeList_1->rewrite(kc_current_view_base);
    if ((l_structTypeList_1 == structTypeList_1))
	return this;
    else {
	impl_type_TypeStruct* kc_result= TypeStruct(l_structTypeList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type impl_type_TypeIntInterval::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_type_TypeIntInterval* kc_result= TypeIntInterval(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type impl_type_TypeIdent::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_type_TypeIdent* kc_result= TypeIdent(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type impl_type_TypeEnum::rewrite(rview kc_current_view_base)
{
    identList l_identList_1 =
	identList_1->rewrite(kc_current_view_base);
    if ((l_identList_1 == identList_1))
	return this;
    else {
	impl_type_TypeEnum* kc_result= TypeEnum(l_identList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type impl_type_TypeBool::rewrite(rview kc_current_view_base)
{
    return this;

}

identList impl_identList_IdentList::rewrite(rview kc_current_view_base)
{
    identList l_identList_1 =
	identList_1->rewrite(kc_current_view_base);
    idents l_idents_1 =
	idents_1->rewrite(kc_current_view_base);
    if ((l_identList_1 == identList_1) &&  (l_idents_1 == idents_1))
	return this;
    else {
	impl_identList_IdentList* kc_result= IdentList(l_identList_1, l_idents_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

identList impl_identList_EmptyIdentList::rewrite(rview kc_current_view_base)
{
    return this;

}

idents impl_idents_Ident::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_integer_1 == integer_1))
	return this;
    else {
	impl_idents_Ident* kc_result= Ident(l_casestring_1, l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

structTypeList impl_structTypeList_StructTypeList::rewrite(rview kc_current_view_base)
{
    structTypeList l_structTypeList_1 =
	structTypeList_1->rewrite(kc_current_view_base);
    structType l_structType_1 =
	structType_1->rewrite(kc_current_view_base);
    if ((l_structTypeList_1 == structTypeList_1) &&  (l_structType_1 == structType_1))
	return this;
    else {
	impl_structTypeList_StructTypeList* kc_result= StructTypeList(l_structTypeList_1, l_structType_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

structTypeList impl_structTypeList_SingleStructTypeList::rewrite(rview kc_current_view_base)
{
    structType l_structType_1 =
	structType_1->rewrite(kc_current_view_base);
    if ((l_structType_1 == structType_1))
	return this;
    else {
	impl_structTypeList_SingleStructTypeList* kc_result= SingleStructTypeList(l_structType_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

structType impl_structType_StructType::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    arrayList l_arrayList_1 =
	arrayList_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_casestring_1 == casestring_1) &&  (l_arrayList_1 == arrayList_1))
	return this;
    else {
	impl_structType_StructType* kc_result= StructType(l_type_1, l_casestring_1, l_arrayList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

varOrArray impl_varOrArray_VarOrArray::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    arrayList l_arrayList_1 =
	arrayList_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_arrayList_1 == arrayList_1))
	return this;
    else {
	impl_varOrArray_VarOrArray* kc_result= VarOrArray(l_casestring_1, l_arrayList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arrayList impl_arrayList_ArrayList::rewrite(rview kc_current_view_base)
{
    arrayList l_arrayList_1 =
	arrayList_1->rewrite(kc_current_view_base);
    array l_array_1 =
	array_1->rewrite(kc_current_view_base);
    if ((l_arrayList_1 == arrayList_1) &&  (l_array_1 == array_1))
	return this;
    else {
	impl_arrayList_ArrayList* kc_result= ArrayList(l_arrayList_1, l_array_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arrayList impl_arrayList_EmptyArrayList::rewrite(rview kc_current_view_base)
{
    return this;

}

array impl_array_Array::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_array_Array* kc_result= Array(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

function impl_function_Function::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    arrayList l_arrayList_1 =
	arrayList_1->rewrite(kc_current_view_base);
    optFunctionParameters l_optFunctionParameters_1 =
	optFunctionParameters_1->rewrite(kc_current_view_base);
    block l_block_1 =
	block_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_casestring_1 == casestring_1) &&  (l_arrayList_1 == arrayList_1) &&  (l_optFunctionParameters_1 == optFunctionParameters_1) &&  (l_block_1 == block_1))
	return this;
    else {
	impl_function_Function* kc_result= Function(l_type_1, l_casestring_1, l_arrayList_1, l_optFunctionParameters_1, l_block_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optFunctionParameters impl_optFunctionParameters_OptFunctionParameters::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    varOrArray l_varOrArray_1 =
	varOrArray_1->rewrite(kc_current_view_base);
    functionParametersList l_functionParametersList_1 =
	functionParametersList_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_varOrArray_1 == varOrArray_1) &&  (l_functionParametersList_1 == functionParametersList_1))
	return this;
    else {
	impl_optFunctionParameters_OptFunctionParameters* kc_result= OptFunctionParameters(l_type_1, l_varOrArray_1, l_functionParametersList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optFunctionParameters impl_optFunctionParameters_EmptyOptFunctionParameters::rewrite(rview kc_current_view_base)
{
    return this;

}

functionParametersList impl_functionParametersList_FunctionParametersList::rewrite(rview kc_current_view_base)
{
    functionParametersList l_functionParametersList_1 =
	functionParametersList_1->rewrite(kc_current_view_base);
    functionParameters l_functionParameters_1 =
	functionParameters_1->rewrite(kc_current_view_base);
    if ((l_functionParametersList_1 == functionParametersList_1) &&  (l_functionParameters_1 == functionParameters_1))
	return this;
    else {
	impl_functionParametersList_FunctionParametersList* kc_result= FunctionParametersList(l_functionParametersList_1, l_functionParameters_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

functionParametersList impl_functionParametersList_EmptyFunctionParametersList::rewrite(rview kc_current_view_base)
{
    return this;

}

functionParameters impl_functionParameters_FunctionParameters::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    varOrArray l_varOrArray_1 =
	varOrArray_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_varOrArray_1 == varOrArray_1))
	return this;
    else {
	impl_functionParameters_FunctionParameters* kc_result= FunctionParameters(l_type_1, l_varOrArray_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

constant impl_constant_Constant::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    arrayList l_arrayList_1 =
	arrayList_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_casestring_1 == casestring_1) &&  (l_arrayList_1 == arrayList_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_constant_Constant* kc_result= Constant(l_type_1, l_casestring_1, l_arrayList_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprInParenthesis::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_expression_ExprInParenthesis* kc_result= ExprInParenthesis(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprInitializerList::rewrite(rview kc_current_view_base)
{
    initializerList l_initializerList_1 =
	initializerList_1->rewrite(kc_current_view_base);
    if ((l_initializerList_1 == initializerList_1))
	return this;
    else {
	impl_expression_ExprInitializerList* kc_result= ExprInitializerList(l_initializerList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprOther::rewrite(rview kc_current_view_base)
{
    other l_other_1 =
	other_1->rewrite(kc_current_view_base);
    if ((l_other_1 == other_1))
	return this;
    else {
	impl_expression_ExprOther* kc_result= ExprOther(l_other_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprLeftvalue::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1))
	return this;
    else {
	impl_expression_ExprLeftvalue* kc_result= ExprLeftvalue(l_leftvalue_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprComparison::rewrite(rview kc_current_view_base)
{
    comparison l_comparison_1 =
	comparison_1->rewrite(kc_current_view_base);
    if ((l_comparison_1 == comparison_1))
	return this;
    else {
	impl_expression_ExprComparison* kc_result= ExprComparison(l_comparison_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprLogical::rewrite(rview kc_current_view_base)
{
    logical l_logical_1 =
	logical_1->rewrite(kc_current_view_base);
    if ((l_logical_1 == logical_1))
	return this;
    else {
	impl_expression_ExprLogical* kc_result= ExprLogical(l_logical_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprArithmetic::rewrite(rview kc_current_view_base)
{
    arithmetic l_arithmetic_1 =
	arithmetic_1->rewrite(kc_current_view_base);
    if ((l_arithmetic_1 == arithmetic_1))
	return this;
    else {
	impl_expression_ExprArithmetic* kc_result= ExprArithmetic(l_arithmetic_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprIncdecrement::rewrite(rview kc_current_view_base)
{
    incdecrement l_incdecrement_1 =
	incdecrement_1->rewrite(kc_current_view_base);
    if ((l_incdecrement_1 == incdecrement_1))
	return this;
    else {
	impl_expression_ExprIncdecrement* kc_result= ExprIncdecrement(l_incdecrement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExprAssignment::rewrite(rview kc_current_view_base)
{
    assignment l_assignment_1 =
	assignment_1->rewrite(kc_current_view_base);
    if ((l_assignment_1 == assignment_1))
	return this;
    else {
	impl_expression_ExprAssignment* kc_result= ExprAssignment(l_assignment_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprInParenthesis2::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprInParenthesis2* kc_result= ExprInParenthesis2(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprOtherWithoutInitializer::rewrite(rview kc_current_view_base)
{
    otherWithoutInitializer l_otherWithoutInitializer_1 =
	otherWithoutInitializer_1->rewrite(kc_current_view_base);
    if ((l_otherWithoutInitializer_1 == otherWithoutInitializer_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprOtherWithoutInitializer* kc_result= ExprOtherWithoutInitializer(l_otherWithoutInitializer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprLeftvalue2::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprLeftvalue2* kc_result= ExprLeftvalue2(l_leftvalue_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprComparisonWithoutInitializer::rewrite(rview kc_current_view_base)
{
    comparisonWithoutInitializer l_comparisonWithoutInitializer_1 =
	comparisonWithoutInitializer_1->rewrite(kc_current_view_base);
    if ((l_comparisonWithoutInitializer_1 == comparisonWithoutInitializer_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprComparisonWithoutInitializer* kc_result= ExprComparisonWithoutInitializer(l_comparisonWithoutInitializer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprLogicalWithoutInitializer::rewrite(rview kc_current_view_base)
{
    logicalWithoutInitializer l_logicalWithoutInitializer_1 =
	logicalWithoutInitializer_1->rewrite(kc_current_view_base);
    if ((l_logicalWithoutInitializer_1 == logicalWithoutInitializer_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprLogicalWithoutInitializer* kc_result= ExprLogicalWithoutInitializer(l_logicalWithoutInitializer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprArithmeticWithoutInitializer::rewrite(rview kc_current_view_base)
{
    arithmeticWithoutInitializer l_arithmeticWithoutInitializer_1 =
	arithmeticWithoutInitializer_1->rewrite(kc_current_view_base);
    if ((l_arithmeticWithoutInitializer_1 == arithmeticWithoutInitializer_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprArithmeticWithoutInitializer* kc_result= ExprArithmeticWithoutInitializer(l_arithmeticWithoutInitializer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprIncdecrement2::rewrite(rview kc_current_view_base)
{
    incdecrement l_incdecrement_1 =
	incdecrement_1->rewrite(kc_current_view_base);
    if ((l_incdecrement_1 == incdecrement_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprIncdecrement2* kc_result= ExprIncdecrement2(l_incdecrement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionWithoutInitializer impl_expressionWithoutInitializer_ExprAssignment2::rewrite(rview kc_current_view_base)
{
    assignment l_assignment_1 =
	assignment_1->rewrite(kc_current_view_base);
    if ((l_assignment_1 == assignment_1))
	return this;
    else {
	impl_expressionWithoutInitializer_ExprAssignment2* kc_result= ExprAssignment2(l_assignment_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

assignment impl_assignment_AssignMod::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_assignment_AssignMod* kc_result= AssignMod(l_leftvalue_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

assignment impl_assignment_AssignDivide::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_assignment_AssignDivide* kc_result= AssignDivide(l_leftvalue_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

assignment impl_assignment_AssignTimes::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_assignment_AssignTimes* kc_result= AssignTimes(l_leftvalue_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

assignment impl_assignment_AssignMinus::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_assignment_AssignMinus* kc_result= AssignMinus(l_leftvalue_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

assignment impl_assignment_AssignPlus::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_assignment_AssignPlus* kc_result= AssignPlus(l_leftvalue_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

assignment impl_assignment_AssignEqual::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_assignment_AssignEqual* kc_result= AssignEqual(l_leftvalue_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

incdecrement impl_incdecrement_ValDecrement::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1))
	return this;
    else {
	impl_incdecrement_ValDecrement* kc_result= ValDecrement(l_leftvalue_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

incdecrement impl_incdecrement_ValIncrement::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1))
	return this;
    else {
	impl_incdecrement_ValIncrement* kc_result= ValIncrement(l_leftvalue_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

incdecrement impl_incdecrement_DecrementVal::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1))
	return this;
    else {
	impl_incdecrement_DecrementVal* kc_result= DecrementVal(l_leftvalue_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

incdecrement impl_incdecrement_IncrementVal::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1))
	return this;
    else {
	impl_incdecrement_IncrementVal* kc_result= IncrementVal(l_leftvalue_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_ExprNumber::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_arithmetic_ExprNumber* kc_result= ExprNumber(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_ExprModulo::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_arithmetic_ExprModulo* kc_result= ExprModulo(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_ExprDivision::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_arithmetic_ExprDivision* kc_result= ExprDivision(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_ExprMultiplication::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_arithmetic_ExprMultiplication* kc_result= ExprMultiplication(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_ExprSubtraction::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_arithmetic_ExprSubtraction* kc_result= ExprSubtraction(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_ExprAddition::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_arithmetic_ExprAddition* kc_result= ExprAddition(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_NegativeExpr::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmetic_NegativeExpr* kc_result= NegativeExpr(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmetic impl_arithmetic_PositiveExpr::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmetic_PositiveExpr* kc_result= PositiveExpr(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_ExprNumber2::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_ExprNumber2* kc_result= ExprNumber2(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_ExprModuloWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_ExprModuloWithoutInitializer* kc_result= ExprModuloWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_ExprDivisionWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_ExprDivisionWithoutInitializer* kc_result= ExprDivisionWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_ExprMultiplicationWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_ExprMultiplicationWithoutInitializer* kc_result= ExprMultiplicationWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_ExprSubtractionWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_ExprSubtractionWithoutInitializer* kc_result= ExprSubtractionWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_ExprAdditionWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_ExprAdditionWithoutInitializer* kc_result= ExprAdditionWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_NegativeExpr2::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_NegativeExpr2* kc_result= NegativeExpr2(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

arithmeticWithoutInitializer impl_arithmeticWithoutInitializer_PositiveExpr2::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_arithmeticWithoutInitializer_PositiveExpr2* kc_result= PositiveExpr2(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

logical impl_logical_ExprFalse::rewrite(rview kc_current_view_base)
{
    return this;

}

logical impl_logical_ExprTrue::rewrite(rview kc_current_view_base)
{
    return this;

}

logical impl_logical_ExprOr::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_logical_ExprOr* kc_result= ExprOr(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

logical impl_logical_ExprAnd::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_logical_ExprAnd* kc_result= ExprAnd(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

logical impl_logical_NotExpr::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_logical_NotExpr* kc_result= NotExpr(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

logicalWithoutInitializer impl_logicalWithoutInitializer_ExprFalse2::rewrite(rview kc_current_view_base)
{
    return this;

}

logicalWithoutInitializer impl_logicalWithoutInitializer_ExprTrue2::rewrite(rview kc_current_view_base)
{
    return this;

}

logicalWithoutInitializer impl_logicalWithoutInitializer_ExprOrWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_logicalWithoutInitializer_ExprOrWithoutInitializer* kc_result= ExprOrWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

logicalWithoutInitializer impl_logicalWithoutInitializer_ExprAndWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_logicalWithoutInitializer_ExprAndWithoutInitializer* kc_result= ExprAndWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

logicalWithoutInitializer impl_logicalWithoutInitializer_NotExpr2::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_logicalWithoutInitializer_NotExpr2* kc_result= NotExpr2(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparison impl_comparison_ExprGreaterOrEqual::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_comparison_ExprGreaterOrEqual* kc_result= ExprGreaterOrEqual(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparison impl_comparison_ExprLessOrEqual::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_comparison_ExprLessOrEqual* kc_result= ExprLessOrEqual(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparison impl_comparison_ExprGreaterThan::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_comparison_ExprGreaterThan* kc_result= ExprGreaterThan(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparison impl_comparison_ExprLessThan::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_comparison_ExprLessThan* kc_result= ExprLessThan(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparison impl_comparison_ExprNotEqual::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_comparison_ExprNotEqual* kc_result= ExprNotEqual(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparison impl_comparison_ExprEquivalent::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_comparison_ExprEquivalent* kc_result= ExprEquivalent(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparisonWithoutInitializer impl_comparisonWithoutInitializer_ExprGreaterOrEqualWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_comparisonWithoutInitializer_ExprGreaterOrEqualWithoutInitializer* kc_result= ExprGreaterOrEqualWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparisonWithoutInitializer impl_comparisonWithoutInitializer_ExprLessOrEqualWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_comparisonWithoutInitializer_ExprLessOrEqualWithoutInitializer* kc_result= ExprLessOrEqualWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparisonWithoutInitializer impl_comparisonWithoutInitializer_ExprGreaterThanWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_comparisonWithoutInitializer_ExprGreaterThanWithoutInitializer* kc_result= ExprGreaterThanWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparisonWithoutInitializer impl_comparisonWithoutInitializer_ExprLessThanWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_comparisonWithoutInitializer_ExprLessThanWithoutInitializer* kc_result= ExprLessThanWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparisonWithoutInitializer impl_comparisonWithoutInitializer_ExprNotEqualWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_comparisonWithoutInitializer_ExprNotEqualWithoutInitializer* kc_result= ExprNotEqualWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

comparisonWithoutInitializer impl_comparisonWithoutInitializer_ExprEquivalentWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_comparisonWithoutInitializer_ExprEquivalentWithoutInitializer* kc_result= ExprEquivalentWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

leftvalue impl_leftvalue_LeftValDot::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_casestring_1 == casestring_1))
	return this;
    else {
	impl_leftvalue_LeftValDot* kc_result= LeftValDot(l_leftvalue_1, l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

leftvalue impl_leftvalue_LeftValBrackets::rewrite(rview kc_current_view_base)
{
    leftvalue l_leftvalue_1 =
	leftvalue_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_leftvalue_1 == leftvalue_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_leftvalue_LeftValBrackets* kc_result= LeftValBrackets(l_leftvalue_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

leftvalue impl_leftvalue_LeftValIdent::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_leftvalue_LeftValIdent* kc_result= LeftValIdent(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

other impl_other_ExprAll::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1))
	return this;
    else {
	impl_other_ExprAll* kc_result= ExprAll(l_type_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

other impl_other_ExprOtherIf::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    expression l_expression_3 =
	expression_3->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2) &&  (l_expression_3 == expression_3))
	return this;
    else {
	impl_other_ExprOtherIf* kc_result= ExprOtherIf(l_expression_1, l_expression_2, l_expression_3);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

other impl_other_ExprCommaSeparated::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_other_ExprCommaSeparated* kc_result= ExprCommaSeparated(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

other impl_other_ExprIdentExprInParenthesis::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_other_ExprIdentExprInParenthesis* kc_result= ExprIdentExprInParenthesis(l_casestring_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

other impl_other_ExprIdentParenthesis::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_other_ExprIdentParenthesis* kc_result= ExprIdentParenthesis(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

otherWithoutInitializer impl_otherWithoutInitializer_ExprAll2::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1))
	return this;
    else {
	impl_otherWithoutInitializer_ExprAll2* kc_result= ExprAll2(l_type_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

otherWithoutInitializer impl_otherWithoutInitializer_ExprOtherIfWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_otherWithoutInitializer_ExprOtherIfWithoutInitializer* kc_result= ExprOtherIfWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

otherWithoutInitializer impl_otherWithoutInitializer_ExprCommaSeparatedWithoutInitializer::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_otherWithoutInitializer_ExprCommaSeparatedWithoutInitializer* kc_result= ExprCommaSeparatedWithoutInitializer(l_expressionWithoutInitializer_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

otherWithoutInitializer impl_otherWithoutInitializer_ExprIdentExprInParenthesis2::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_otherWithoutInitializer_ExprIdentExprInParenthesis2* kc_result= ExprIdentExprInParenthesis2(l_casestring_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

otherWithoutInitializer impl_otherWithoutInitializer_ExprIdentParenthesis2::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_otherWithoutInitializer_ExprIdentParenthesis2* kc_result= ExprIdentParenthesis2(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

initializerList impl_initializerList_ExprInBracesColon::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    expressionListColon l_expressionListColon_1 =
	expressionListColon_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2) &&  (l_expressionListColon_1 == expressionListColon_1))
	return this;
    else {
	impl_initializerList_ExprInBracesColon* kc_result= ExprInBracesColon(l_expression_1, l_expression_2, l_expressionListColon_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

initializerList impl_initializerList_ExprInBraces::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_initializerList_ExprInBraces* kc_result= ExprInBraces(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

initializerList impl_initializerList_Braces::rewrite(rview kc_current_view_base)
{
    return this;

}

expressionListColon impl_expressionListColon_ExpressionListColon::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    expressionListColon l_expressionListColon_1 =
	expressionListColon_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2) &&  (l_expressionListColon_1 == expressionListColon_1))
	return this;
    else {
	impl_expressionListColon_ExpressionListColon* kc_result= ExpressionListColon(l_expression_1, l_expression_2, l_expressionListColon_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expressionListColon impl_expressionListColon_EmptyExpressionListColon::rewrite(rview kc_current_view_base)
{
    return this;

}

places impl_places_Places::rewrite(rview kc_current_view_base)
{
    optSafe l_optSafe_1 =
	optSafe_1->rewrite(kc_current_view_base);
    optType l_optType_1 =
	optType_1->rewrite(kc_current_view_base);
    place l_place_1 =
	place_1->rewrite(kc_current_view_base);
    commaPlaces l_commaPlaces_1 =
	commaPlaces_1->rewrite(kc_current_view_base);
    morePlaces l_morePlaces_1 =
	morePlaces_1->rewrite(kc_current_view_base);
    if ((l_optSafe_1 == optSafe_1) &&  (l_optType_1 == optType_1) &&  (l_place_1 == place_1) &&  (l_commaPlaces_1 == commaPlaces_1) &&  (l_morePlaces_1 == morePlaces_1))
	return this;
    else {
	impl_places_Places* kc_result= Places(l_optSafe_1, l_optType_1, l_place_1, l_commaPlaces_1, l_morePlaces_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optSafe impl_optSafe_Safe::rewrite(rview kc_current_view_base)
{
    optNumber l_optNumber_1 =
	optNumber_1->rewrite(kc_current_view_base);
    if ((l_optNumber_1 == optNumber_1))
	return this;
    else {
	impl_optSafe_Safe* kc_result= Safe(l_optNumber_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optSafe impl_optSafe_EmptySafe::rewrite(rview kc_current_view_base)
{
    return this;

}

optNumber impl_optNumber_PlaceNumber::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_optNumber_PlaceNumber* kc_result= PlaceNumber(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optNumber impl_optNumber_EmptyPlaceNumber::rewrite(rview kc_current_view_base)
{
    return this;

}

optType impl_optType_PlaceTypeMultiset::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1))
	return this;
    else {
	impl_optType_PlaceTypeMultiset* kc_result= PlaceTypeMultiset(l_type_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optType impl_optType_PlaceTypeInt::rewrite(rview kc_current_view_base)
{
    return this;

}

optType impl_optType_PlaceTypeStruct::rewrite(rview kc_current_view_base)
{
    structTypeList l_structTypeList_1 =
	structTypeList_1->rewrite(kc_current_view_base);
    if ((l_structTypeList_1 == structTypeList_1))
	return this;
    else {
	impl_optType_PlaceTypeStruct* kc_result= PlaceTypeStruct(l_structTypeList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optType impl_optType_PlaceTypeIntInterval::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_optType_PlaceTypeIntInterval* kc_result= PlaceTypeIntInterval(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optType impl_optType_PlaceTypeEnum::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    identList l_identList_1 =
	identList_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_integer_1 == integer_1) &&  (l_identList_1 == identList_1))
	return this;
    else {
	impl_optType_PlaceTypeEnum* kc_result= PlaceTypeEnum(l_casestring_1, l_integer_1, l_identList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optType impl_optType_PlaceTypeBool::rewrite(rview kc_current_view_base)
{
    return this;

}

optType impl_optType_EmptyPlaceType::rewrite(rview kc_current_view_base)
{
    return this;

}

place impl_place_PlaceWithTypeIdent::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    casestring l_casestring_2 =
	casestring_2->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_casestring_2 == casestring_2))
	return this;
    else {
	impl_place_PlaceWithTypeIdent* kc_result= PlaceWithTypeIdent(l_casestring_1, l_casestring_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

place impl_place_Place::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_place_Place* kc_result= Place(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

commaPlaces impl_commaPlaces_CommaPlaces::rewrite(rview kc_current_view_base)
{
    optType l_optType_1 =
	optType_1->rewrite(kc_current_view_base);
    place l_place_1 =
	place_1->rewrite(kc_current_view_base);
    commaPlaces l_commaPlaces_1 =
	commaPlaces_1->rewrite(kc_current_view_base);
    if ((l_optType_1 == optType_1) &&  (l_place_1 == place_1) &&  (l_commaPlaces_1 == commaPlaces_1))
	return this;
    else {
	impl_commaPlaces_CommaPlaces* kc_result= CommaPlaces(l_optType_1, l_place_1, l_commaPlaces_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

commaPlaces impl_commaPlaces_EmptyCommaPlaces::rewrite(rview kc_current_view_base)
{
    return this;

}

morePlaces impl_morePlaces_MorePlaces::rewrite(rview kc_current_view_base)
{
    optSafe l_optSafe_1 =
	optSafe_1->rewrite(kc_current_view_base);
    optType l_optType_1 =
	optType_1->rewrite(kc_current_view_base);
    place l_place_1 =
	place_1->rewrite(kc_current_view_base);
    commaPlaces l_commaPlaces_1 =
	commaPlaces_1->rewrite(kc_current_view_base);
    morePlaces l_morePlaces_1 =
	morePlaces_1->rewrite(kc_current_view_base);
    if ((l_optSafe_1 == optSafe_1) &&  (l_optType_1 == optType_1) &&  (l_place_1 == place_1) &&  (l_commaPlaces_1 == commaPlaces_1) &&  (l_morePlaces_1 == morePlaces_1))
	return this;
    else {
	impl_morePlaces_MorePlaces* kc_result= MorePlaces(l_optSafe_1, l_optType_1, l_place_1, l_commaPlaces_1, l_morePlaces_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

morePlaces impl_morePlaces_EmptyMorePlaces::rewrite(rview kc_current_view_base)
{
    return this;

}

marking impl_marking_Marking::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    markingList l_markingList_1 =
	markingList_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1) &&  (l_markingList_1 == markingList_1))
	return this;
    else {
	impl_marking_Marking* kc_result= Marking(l_casestring_1, l_expression_1, l_markingList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

marking impl_marking_EmptyMarking::rewrite(rview kc_current_view_base)
{
    return this;

}

markingList impl_markingList_MarkingList::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    markingList l_markingList_1 =
	markingList_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1) &&  (l_markingList_1 == markingList_1))
	return this;
    else {
	impl_markingList_MarkingList* kc_result= MarkingList(l_casestring_1, l_expression_1, l_markingList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

markingList impl_markingList_EmptyMarkingList::rewrite(rview kc_current_view_base)
{
    return this;

}

transition impl_transition_Transition::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    fairness l_fairness_1 =
	fairness_1->rewrite(kc_current_view_base);
    variable l_variable_1 =
	variable_1->rewrite(kc_current_view_base);
    guard l_guard_1 =
	guard_1->rewrite(kc_current_view_base);
    optIdentExprList l_optIdentExprList_1 =
	optIdentExprList_1->rewrite(kc_current_view_base);
    optIdentExprList l_optIdentExprList_2 =
	optIdentExprList_2->rewrite(kc_current_view_base);
    transition l_transition_1 =
	transition_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_fairness_1 == fairness_1) &&  (l_variable_1 == variable_1) &&  (l_guard_1 == guard_1) &&  (l_optIdentExprList_1 == optIdentExprList_1) &&  (l_optIdentExprList_2 == optIdentExprList_2) &&  (l_transition_1 == transition_1))
	return this;
    else {
	impl_transition_Transition* kc_result= Transition(l_casestring_1, l_fairness_1, l_variable_1, l_guard_1, l_optIdentExprList_1, l_optIdentExprList_2, l_transition_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

transition impl_transition_EmptyTransition::rewrite(rview kc_current_view_base)
{
    return this;

}

fairness impl_fairness_StrongFair::rewrite(rview kc_current_view_base)
{
    return this;

}

fairness impl_fairness_WeakFair::rewrite(rview kc_current_view_base)
{
    return this;

}

fairness impl_fairness_EmptyFairness::rewrite(rview kc_current_view_base)
{
    return this;

}

variable impl_variable_Variable::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    varOrArray l_varOrArray_1 =
	varOrArray_1->rewrite(kc_current_view_base);
    varOrArrayList l_varOrArrayList_1 =
	varOrArrayList_1->rewrite(kc_current_view_base);
    variable l_variable_1 =
	variable_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_varOrArray_1 == varOrArray_1) &&  (l_varOrArrayList_1 == varOrArrayList_1) &&  (l_variable_1 == variable_1))
	return this;
    else {
	impl_variable_Variable* kc_result= Variable(l_type_1, l_varOrArray_1, l_varOrArrayList_1, l_variable_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

variable impl_variable_EmptyVariable::rewrite(rview kc_current_view_base)
{
    return this;

}

varOrArrayList impl_varOrArrayList_VarOrArrayList::rewrite(rview kc_current_view_base)
{
    varOrArray l_varOrArray_1 =
	varOrArray_1->rewrite(kc_current_view_base);
    varOrArrayList l_varOrArrayList_1 =
	varOrArrayList_1->rewrite(kc_current_view_base);
    if ((l_varOrArray_1 == varOrArray_1) &&  (l_varOrArrayList_1 == varOrArrayList_1))
	return this;
    else {
	impl_varOrArrayList_VarOrArrayList* kc_result= VarOrArrayList(l_varOrArray_1, l_varOrArrayList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

varOrArrayList impl_varOrArrayList_EmptyVarOrArrayList::rewrite(rview kc_current_view_base)
{
    return this;

}

guard impl_guard_Guard::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_guard_Guard* kc_result= Guard(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

guard impl_guard_EmptyGuard::rewrite(rview kc_current_view_base)
{
    return this;

}

optIdentExprList impl_optIdentExprList_OptIdentExprList::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    identExprList l_identExprList_1 =
	identExprList_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1) &&  (l_identExprList_1 == identExprList_1))
	return this;
    else {
	impl_optIdentExprList_OptIdentExprList* kc_result= OptIdentExprList(l_casestring_1, l_expression_1, l_identExprList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optIdentExprList impl_optIdentExprList_EmptyOptIdentExprList::rewrite(rview kc_current_view_base)
{
    return this;

}

identExprList impl_identExprList_IdentExprList::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    identExprList l_identExprList_1 =
	identExprList_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1) &&  (l_identExprList_1 == identExprList_1))
	return this;
    else {
	impl_identExprList_IdentExprList* kc_result= IdentExprList(l_casestring_1, l_expression_1, l_identExprList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

identExprList impl_identExprList_EmptyIdentExprList::rewrite(rview kc_current_view_base)
{
    return this;

}

block impl_block_Block::rewrite(rview kc_current_view_base)
{
    declarationOrStatement l_declarationOrStatement_1 =
	declarationOrStatement_1->rewrite(kc_current_view_base);
    if ((l_declarationOrStatement_1 == declarationOrStatement_1))
	return this;
    else {
	impl_block_Block* kc_result= Block(l_declarationOrStatement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

declarationOrStatement impl_declarationOrStatement_DeclOrStatemStatement::rewrite(rview kc_current_view_base)
{
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    declarationOrStatement l_declarationOrStatement_1 =
	declarationOrStatement_1->rewrite(kc_current_view_base);
    if ((l_statement_1 == statement_1) &&  (l_declarationOrStatement_1 == declarationOrStatement_1))
	return this;
    else {
	impl_declarationOrStatement_DeclOrStatemStatement* kc_result= DeclOrStatemStatement(l_statement_1, l_declarationOrStatement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

declarationOrStatement impl_declarationOrStatement_DeclOrStatemDeclaration::rewrite(rview kc_current_view_base)
{
    declaration l_declaration_1 =
	declaration_1->rewrite(kc_current_view_base);
    declarationOrStatement l_declarationOrStatement_1 =
	declarationOrStatement_1->rewrite(kc_current_view_base);
    if ((l_declaration_1 == declaration_1) &&  (l_declarationOrStatement_1 == declarationOrStatement_1))
	return this;
    else {
	impl_declarationOrStatement_DeclOrStatemDeclaration* kc_result= DeclOrStatemDeclaration(l_declaration_1, l_declarationOrStatement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

declarationOrStatement impl_declarationOrStatement_EmptyDeclarationOrStatement::rewrite(rview kc_current_view_base)
{
    return this;

}

declaration impl_declaration_Declaration::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    varOrArray l_varOrArray_1 =
	varOrArray_1->rewrite(kc_current_view_base);
    varOrArrayList l_varOrArrayList_1 =
	varOrArrayList_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_varOrArray_1 == varOrArray_1) &&  (l_varOrArrayList_1 == varOrArrayList_1))
	return this;
    else {
	impl_declaration_Declaration* kc_result= Declaration(l_type_1, l_varOrArray_1, l_varOrArrayList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementReturn::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_statement_StatementReturn* kc_result= StatementReturn(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementContinue::rewrite(rview kc_current_view_base)
{
    return this;

}

statement impl_statement_StatementBreak::rewrite(rview kc_current_view_base)
{
    return this;

}

statement impl_statement_StatementSwitch::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    switchCase l_switchCase_1 =
	switchCase_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_switchCase_1 == switchCase_1))
	return this;
    else {
	impl_statement_StatementSwitch* kc_result= StatementSwitch(l_expression_1, l_switchCase_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementForAll::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    type l_type_2 =
	type_2->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_casestring_1 == casestring_1) &&  (l_type_2 == type_2))
	return this;
    else {
	impl_statement_StatementForAll* kc_result= StatementForAll(l_type_1, l_casestring_1, l_type_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementForIdentColon::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1) &&  (l_statement_1 == statement_1))
	return this;
    else {
	impl_statement_StatementForIdentColon* kc_result= StatementForIdentColon(l_casestring_1, l_expression_1, l_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementForTypeExpr::rewrite(rview kc_current_view_base)
{
    type l_type_1 =
	type_1->rewrite(kc_current_view_base);
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    expression l_expression_3 =
	expression_3->rewrite(kc_current_view_base);
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    if ((l_type_1 == type_1) &&  (l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1) &&  (l_expression_2 == expression_2) &&  (l_expression_3 == expression_3) &&  (l_statement_1 == statement_1))
	return this;
    else {
	impl_statement_StatementForTypeExpr* kc_result= StatementForTypeExpr(l_type_1, l_casestring_1, l_expression_1, l_expression_2, l_expression_3, l_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementForExpr::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    expression l_expression_3 =
	expression_3->rewrite(kc_current_view_base);
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2) &&  (l_expression_3 == expression_3) &&  (l_statement_1 == statement_1))
	return this;
    else {
	impl_statement_StatementForExpr* kc_result= StatementForExpr(l_expression_1, l_expression_2, l_expression_3, l_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementDoWhile::rewrite(rview kc_current_view_base)
{
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_statement_1 == statement_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_statement_StatementDoWhile* kc_result= StatementDoWhile(l_statement_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementWhile::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_statement_1 == statement_1))
	return this;
    else {
	impl_statement_StatementWhile* kc_result= StatementWhile(l_expression_1, l_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementIf::rewrite(rview kc_current_view_base)
{
    ifStatement l_ifStatement_1 =
	ifStatement_1->rewrite(kc_current_view_base);
    if ((l_ifStatement_1 == ifStatement_1))
	return this;
    else {
	impl_statement_StatementIf* kc_result= StatementIf(l_ifStatement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementExprSemicolon::rewrite(rview kc_current_view_base)
{
    expressionWithoutInitializer l_expressionWithoutInitializer_1 =
	expressionWithoutInitializer_1->rewrite(kc_current_view_base);
    if ((l_expressionWithoutInitializer_1 == expressionWithoutInitializer_1))
	return this;
    else {
	impl_statement_StatementExprSemicolon* kc_result= StatementExprSemicolon(l_expressionWithoutInitializer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementBlock::rewrite(rview kc_current_view_base)
{
    block l_block_1 =
	block_1->rewrite(kc_current_view_base);
    if ((l_block_1 == block_1))
	return this;
    else {
	impl_statement_StatementBlock* kc_result= StatementBlock(l_block_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_StatementSemiolon::rewrite(rview kc_current_view_base)
{
    return this;

}

ifStatement impl_ifStatement_IfStatement::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    optElse l_optElse_1 =
	optElse_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_statement_1 == statement_1) &&  (l_optElse_1 == optElse_1))
	return this;
    else {
	impl_ifStatement_IfStatement* kc_result= IfStatement(l_expression_1, l_statement_1, l_optElse_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optElse impl_optElse_OptElse::rewrite(rview kc_current_view_base)
{
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    if ((l_statement_1 == statement_1))
	return this;
    else {
	impl_optElse_OptElse* kc_result= OptElse(l_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

optElse impl_optElse_OptElseEmpty::rewrite(rview kc_current_view_base)
{
    return this;

}

switchCase impl_switchCase_SwitchDefault::rewrite(rview kc_current_view_base)
{
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    switchCaseList l_switchCaseList_1 =
	switchCaseList_1->rewrite(kc_current_view_base);
    if ((l_statement_1 == statement_1) &&  (l_switchCaseList_1 == switchCaseList_1))
	return this;
    else {
	impl_switchCase_SwitchDefault* kc_result= SwitchDefault(l_statement_1, l_switchCaseList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

switchCase impl_switchCase_SwitchCase::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    switchCaseList l_switchCaseList_1 =
	switchCaseList_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_statement_1 == statement_1) &&  (l_switchCaseList_1 == switchCaseList_1))
	return this;
    else {
	impl_switchCase_SwitchCase* kc_result= SwitchCase(l_expression_1, l_statement_1, l_switchCaseList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

switchCaseList impl_switchCaseList_SwitchDefaultList::rewrite(rview kc_current_view_base)
{
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    switchCaseList l_switchCaseList_1 =
	switchCaseList_1->rewrite(kc_current_view_base);
    if ((l_statement_1 == statement_1) &&  (l_switchCaseList_1 == switchCaseList_1))
	return this;
    else {
	impl_switchCaseList_SwitchDefaultList* kc_result= SwitchDefaultList(l_statement_1, l_switchCaseList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

switchCaseList impl_switchCaseList_SwitchCaseList::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement l_statement_1 =
	statement_1->rewrite(kc_current_view_base);
    switchCaseList l_switchCaseList_1 =
	switchCaseList_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_statement_1 == statement_1) &&  (l_switchCaseList_1 == switchCaseList_1))
	return this;
    else {
	impl_switchCaseList_SwitchCaseList* kc_result= SwitchCaseList(l_expression_1, l_statement_1, l_switchCaseList_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

switchCaseList impl_switchCaseList_EmptySwitchCaseList::rewrite(rview kc_current_view_base)
{
    return this;

}

} // namespace kc
