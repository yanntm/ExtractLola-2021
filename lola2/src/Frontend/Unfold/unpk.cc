/* translation of file(s)
	"abstract.k"
	"unparse.k"
	"rewrite.k"
 */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.11 (C) 1998-2007 Humboldt-University of Berlin $
 */
#define KC_UNPARSE

#include <stdio.h>
#include <string>
#include <stdlib.h>
#include "k.h"
#include "unpk.h"


namespace kc {
base_uview_class base_uview;
typecheck_class typecheck;

impl_uviews uviews[] = {
    {"base_uview",&base_uview},
    {"typecheck",&typecheck},
    {0,0}
};

} // namespace kc
namespace kc { }
using namespace kc;
/* included stuff */
#line 5 "unparse.k"
#include "diagnosis.h" //TODO: Location von yyerror hier nicht korrekt

#line  36 "unpk.cc"
/* end included stuff */


namespace kc {

#ifndef KC_TRACE_PROVIDED
#define KC_TRACE_PROVIDED(COND,FILE,LINE,NODE) COND
#endif

void
impl_abstract_phylum::unparse(printer_function opf, uview uv)
{
    printer_functor_function_wrapper pf(opf);
    do_unparse(pf, uv);
}

// Everything given as a pointer is expected to have an unparse-method (we
// believe it's a phylum), unless there's a specialisation for it

void
unparse(abstract_phylum kc_p, printer_functor kc_printer, uview kc_current_view)
{
    kc_p->unparse(kc_printer, kc_current_view);
}

void
unparse(void *kc_p, printer_functor kc_printer, uview kc_current_view)
{
    // MPi: 20020628 there shouldn't be any left
    assertionFailed("Unparse called for untyped pointer");
    // MPi: cast should be unnecessary, but there are still void*
    reinterpret_cast<impl_abstract_phylum*>(kc_p)->unparse(kc_printer, kc_current_view);
}

void
unparse(int kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_char_t kc_string[200];
    kc_print_integer(kc_string, kc_v);
    kc_printer(kc_string, kc_current_view);
}

void
unparse(double kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_char_t kc_string[200];
    kc_print_real(kc_string, kc_v);
    kc_printer(kc_string, kc_current_view);
}

void
unparse(kc_char_t *kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_printer(kc_v, kc_current_view);
}

void
unparse(kc_string_t kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_printer(kc_v.c_str(), kc_current_view);
}

#line  99 "unpk.cc"
void
impl_abstract_phylum::default_unparse(printer_functor kc_printer, uview kc_current_view)
{
    register int no_sons = operator_info[prod_sel()].no_sons;
    for (int i=0; i < no_sons; i++)
    subphylum(i)->unparse(kc_printer, kc_current_view);
}

void
impl_casestring__Str::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(name, kc_printer, kc_current_view);
}

void
impl_nocasestring_NoCaseStr::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(name, kc_printer, kc_current_view);
}

void
impl_integer__Int::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(value, kc_printer, kc_current_view);
}

void
impl_real__Real::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(value, kc_printer, kc_current_view);
}

void
impl_voidptr__VoidPtr::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(pointer, kc_printer, kc_current_view);
}


#line  139 "unpk.cc"
void
impl_net_Net::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  145 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  158 "unpk.cc"
void
impl_netName_NetName::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
	    }
	    break;
	}

#line  170 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  183 "unpk.cc"
void
impl_netName_EmptyNetName::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  189 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  201 "unpk.cc"
void
impl_definitionsList_DefinitionsList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  207 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  220 "unpk.cc"
void
impl_definitionsList_EmptyDefinitionsList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  226 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  238 "unpk.cc"
void
impl_definitions_DefConstant::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  244 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  257 "unpk.cc"
void
impl_definitions_DefFunction::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  263 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  276 "unpk.cc"
void
impl_definitions_DefSort::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  282 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  295 "unpk.cc"
void
impl_sort_Sort::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 11 "unparse.k"
		const type typeS = this->type_1;
#line 11 "unparse.k"
		const arrayList arrayL = this->arrayList_1;
		kc::unparse(typeS, kc_printer, kc_current_view);
		kc::unparse(arrayL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  313 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  326 "unpk.cc"
void
impl_type_TypeMultiset::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  332 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  345 "unpk.cc"
void
impl_type_TypeInt::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  351 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  363 "unpk.cc"
void
impl_type_TypeStruct::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  369 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  382 "unpk.cc"
void
impl_type_TypeIntInterval::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 37 "unparse.k"
		const expression expr1 = this->expression_1;
#line 37 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  400 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  413 "unpk.cc"
void
impl_type_TypeIdent::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
	    }
	    break;
	}

#line  425 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  438 "unpk.cc"
void
impl_type_TypeEnum::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 12 "unparse.k"
		const identList identL = this->identList_1;
		kc::unparse(identL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  453 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  466 "unpk.cc"
void
impl_type_TypeBool::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  472 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  484 "unpk.cc"
void
impl_identList_IdentList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 13 "unparse.k"
		const identList identL = this->identList_1;
#line 13 "unparse.k"
		const idents id = this->idents_1;
		kc::unparse(identL, kc_printer, kc_current_view);
		kc::unparse(id, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  502 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  515 "unpk.cc"
void
impl_identList_EmptyIdentList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
	    }
	    break;
	}

#line  527 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  539 "unpk.cc"
void
impl_idents_Ident::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  545 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  558 "unpk.cc"
void
impl_structTypeList_StructTypeList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  564 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  577 "unpk.cc"
void
impl_structTypeList_SingleStructTypeList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  583 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  596 "unpk.cc"
void
impl_structType_StructType::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 16 "unparse.k"
		const type typeS = this->type_1;
#line 16 "unparse.k"
		const arrayList arrayL = this->arrayList_1;
		kc::unparse(typeS, kc_printer, kc_current_view);
		kc::unparse(arrayL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  614 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  627 "unpk.cc"
void
impl_varOrArray_VarOrArray::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 17 "unparse.k"
		const arrayList arrayL = this->arrayList_1;
		kc::unparse(arrayL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  642 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  655 "unpk.cc"
void
impl_arrayList_ArrayList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  661 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  674 "unpk.cc"
void
impl_arrayList_EmptyArrayList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  680 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  692 "unpk.cc"
void
impl_array_Array::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  698 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  711 "unpk.cc"
void
impl_function_Function::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 18 "unparse.k"
		const type typeF = this->type_1;
#line 18 "unparse.k"
		const arrayList arrayL = this->arrayList_1;
#line 18 "unparse.k"
		const optFunctionParameters functionParam = this->optFunctionParameters_1;
#line 18 "unparse.k"
		const block blocks = this->block_1;
		kc::unparse(typeF, kc_printer, kc_current_view);
		kc::unparse(arrayL, kc_printer, kc_current_view);
		kc::unparse(functionParam, kc_printer, kc_current_view);
		kc::unparse(blocks, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  735 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  748 "unpk.cc"
void
impl_optFunctionParameters_OptFunctionParameters::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  754 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  767 "unpk.cc"
void
impl_optFunctionParameters_EmptyOptFunctionParameters::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  773 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  785 "unpk.cc"
void
impl_functionParametersList_FunctionParametersList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  791 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  804 "unpk.cc"
void
impl_functionParametersList_EmptyFunctionParametersList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  810 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  822 "unpk.cc"
void
impl_functionParameters_FunctionParameters::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  828 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  841 "unpk.cc"
void
impl_constant_Constant::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 19 "unparse.k"
		const type typeS = this->type_1;
#line 19 "unparse.k"
		const arrayList arrayL = this->arrayList_1;
#line 19 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(typeS, kc_printer, kc_current_view);
		kc::unparse(arrayL, kc_printer, kc_current_view);
		kc::unparse(expr, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  862 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  875 "unpk.cc"
void
impl_expression_ExprInParenthesis::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  881 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  894 "unpk.cc"
void
impl_expression_ExprInitializerList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  900 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  913 "unpk.cc"
void
impl_expression_ExprOther::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  919 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  932 "unpk.cc"
void
impl_expression_ExprLeftvalue::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  938 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  951 "unpk.cc"
void
impl_expression_ExprComparison::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 61 "unparse.k"
		const expression expr = this/**/;
#line 61 "unparse.k"
		const comparison compare = this->comparison_1;
		kc::unparse(compare, kc_printer, kc_current_view);
#line 62 "unparse.k"
		if(compare->check==BOOL) { expr->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  968 "unpk.cc"
	    }
	    break;
	}

#line  973 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  986 "unpk.cc"
void
impl_expression_ExprLogical::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 55 "unparse.k"
		const expression expr = this/**/;
#line 55 "unparse.k"
		const logical logic = this->logical_1;
		kc::unparse(logic, kc_printer, kc_current_view);
#line 56 "unparse.k"
		if(logic->check==BOOL) { expr->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  1003 "unpk.cc"
	    }
	    break;
	}

#line  1008 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1021 "unpk.cc"
void
impl_expression_ExprArithmetic::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 49 "unparse.k"
		const expression expr = this/**/;
#line 49 "unparse.k"
		const arithmetic arithm = this->arithmetic_1;
		kc::unparse(arithm, kc_printer, kc_current_view);
#line 50 "unparse.k"
		if(arithm->check==NUMB) { expr->check=NUMB; }
		else { yyerror("Non-Arithmetic"); }

#line  1038 "unpk.cc"
	    }
	    break;
	}

#line  1043 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1056 "unpk.cc"
void
impl_expression_ExprIncdecrement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1062 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1075 "unpk.cc"
void
impl_expression_ExprAssignment::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 45 "unparse.k"
		const expression expr = this/**/;
#line 45 "unparse.k"
		const assignment assign = this->assignment_1;
		kc::unparse(assign, kc_printer, kc_current_view);
#line 46 "unparse.k"
		expr->check=assign->check; 
#line  1090 "unpk.cc"
	    }
	    break;
	}

#line  1095 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1108 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprInParenthesis2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1114 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1127 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprOtherWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1133 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1146 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprLeftvalue2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1152 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1165 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprComparisonWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 89 "unparse.k"
		const expressionWithoutInitializer exprInit = this/**/;
#line 89 "unparse.k"
		const comparisonWithoutInitializer compareInit = this->comparisonWithoutInitializer_1;
		kc::unparse(compareInit, kc_printer, kc_current_view);
#line 90 "unparse.k"
		if(compareInit->check==BOOL) { exprInit->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  1182 "unpk.cc"
	    }
	    break;
	}

#line  1187 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1200 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprLogicalWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 83 "unparse.k"
		const expressionWithoutInitializer exprInit = this/**/;
#line 83 "unparse.k"
		const logicalWithoutInitializer logicInit = this->logicalWithoutInitializer_1;
		kc::unparse(logicInit, kc_printer, kc_current_view);
#line 84 "unparse.k"
		if(logicInit->check==BOOL) { exprInit->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  1217 "unpk.cc"
	    }
	    break;
	}

#line  1222 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1235 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprArithmeticWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 77 "unparse.k"
		const expressionWithoutInitializer exprInit = this/**/;
#line 77 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this->arithmeticWithoutInitializer_1;
		kc::unparse(arithmInit, kc_printer, kc_current_view);
#line 78 "unparse.k"
		if(arithmInit->check==NUMB) { exprInit->check=NUMB; }
		else { yyerror("Non-Arithmetic"); }

#line  1252 "unpk.cc"
	    }
	    break;
	}

#line  1257 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1270 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprIncdecrement2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1276 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1289 "unpk.cc"
void
impl_expressionWithoutInitializer_ExprAssignment2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 73 "unparse.k"
		const expressionWithoutInitializer exprInit = this/**/;
#line 73 "unparse.k"
		const assignment assign = this->assignment_1;
		kc::unparse(assign, kc_printer, kc_current_view);
#line 74 "unparse.k"
		exprInit->check=assign->check; 
#line  1304 "unpk.cc"
	    }
	    break;
	}

#line  1309 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1322 "unpk.cc"
void
impl_assignment_AssignMod::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 127 "unparse.k"
		const assignment assign = this/**/;
#line 127 "unparse.k"
		const leftvalue leftval = this->leftvalue_1;
#line 127 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(leftval, kc_printer, kc_current_view);
		kc::unparse(expr, kc_printer, kc_current_view);
#line 128 "unparse.k"
		if(expr->check==NUMB ) { assign->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1342 "unpk.cc"
	    }
	    break;
	}

#line  1347 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1360 "unpk.cc"
void
impl_assignment_AssignDivide::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 121 "unparse.k"
		const assignment assign = this/**/;
#line 121 "unparse.k"
		const leftvalue leftval = this->leftvalue_1;
#line 121 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(leftval, kc_printer, kc_current_view);
		kc::unparse(expr, kc_printer, kc_current_view);
#line 122 "unparse.k"
		if(expr->check==NUMB ) { assign->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1380 "unpk.cc"
	    }
	    break;
	}

#line  1385 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1398 "unpk.cc"
void
impl_assignment_AssignTimes::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 115 "unparse.k"
		const assignment assign = this/**/;
#line 115 "unparse.k"
		const leftvalue leftval = this->leftvalue_1;
#line 115 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(leftval, kc_printer, kc_current_view);
		kc::unparse(expr, kc_printer, kc_current_view);
#line 116 "unparse.k"
		if(expr->check==NUMB ) { assign->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1418 "unpk.cc"
	    }
	    break;
	}

#line  1423 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1436 "unpk.cc"
void
impl_assignment_AssignMinus::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 109 "unparse.k"
		const assignment assign = this/**/;
#line 109 "unparse.k"
		const leftvalue leftval = this->leftvalue_1;
#line 109 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(leftval, kc_printer, kc_current_view);
		kc::unparse(expr, kc_printer, kc_current_view);
#line 110 "unparse.k"
		if(expr->check==NUMB ) { assign->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1456 "unpk.cc"
	    }
	    break;
	}

#line  1461 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1474 "unpk.cc"
void
impl_assignment_AssignPlus::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 103 "unparse.k"
		const assignment assign = this/**/;
#line 103 "unparse.k"
		const leftvalue leftval = this->leftvalue_1;
#line 103 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(leftval, kc_printer, kc_current_view);
		kc::unparse(expr, kc_printer, kc_current_view);
#line 104 "unparse.k"
		if(expr->check==NUMB ) { assign->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1494 "unpk.cc"
	    }
	    break;
	}

#line  1499 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1512 "unpk.cc"
void
impl_assignment_AssignEqual::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1518 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1531 "unpk.cc"
void
impl_incdecrement_ValDecrement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1537 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1550 "unpk.cc"
void
impl_incdecrement_ValIncrement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1556 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1569 "unpk.cc"
void
impl_incdecrement_DecrementVal::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1575 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1588 "unpk.cc"
void
impl_incdecrement_IncrementVal::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1594 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1607 "unpk.cc"
void
impl_arithmetic_ExprNumber::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 177 "unparse.k"
		const arithmetic arithm = this/**/;
#line 177 "unparse.k"
		arithm->check=NUMB; fprintf(stdout,"NUMB!\n");
#line  1619 "unpk.cc"
	    }
	    break;
	}

#line  1624 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1637 "unpk.cc"
void
impl_arithmetic_ExprModulo::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 171 "unparse.k"
		const arithmetic arithm = this/**/;
#line 171 "unparse.k"
		const expression expr1 = this->expression_1;
#line 171 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 172 "unparse.k"
		if(expr1->check==NUMB && expr2->check==NUMB) { arithm->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1657 "unpk.cc"
	    }
	    break;
	}

#line  1662 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1675 "unpk.cc"
void
impl_arithmetic_ExprDivision::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 165 "unparse.k"
		const arithmetic arithm = this/**/;
#line 165 "unparse.k"
		const expression expr1 = this->expression_1;
#line 165 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 166 "unparse.k"
		if(expr1->check==NUMB && expr2->check==NUMB) { arithm->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1695 "unpk.cc"
	    }
	    break;
	}

#line  1700 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1713 "unpk.cc"
void
impl_arithmetic_ExprMultiplication::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 159 "unparse.k"
		const arithmetic arithm = this/**/;
#line 159 "unparse.k"
		const expression expr1 = this->expression_1;
#line 159 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 160 "unparse.k"
		if(expr1->check==NUMB && expr2->check==NUMB) { arithm->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1733 "unpk.cc"
	    }
	    break;
	}

#line  1738 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1751 "unpk.cc"
void
impl_arithmetic_ExprSubtraction::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 153 "unparse.k"
		const arithmetic arithm = this/**/;
#line 153 "unparse.k"
		const expression expr1 = this->expression_1;
#line 153 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 154 "unparse.k"
		if(expr1->check==NUMB && expr2->check==NUMB) { arithm->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1771 "unpk.cc"
	    }
	    break;
	}

#line  1776 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1789 "unpk.cc"
void
impl_arithmetic_ExprAddition::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 147 "unparse.k"
		const arithmetic arithm = this/**/;
#line 147 "unparse.k"
		const expression expr1 = this->expression_1;
#line 147 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 148 "unparse.k"
		if(expr1->check==NUMB && expr2->check==NUMB) { arithm->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1809 "unpk.cc"
	    }
	    break;
	}

#line  1814 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1827 "unpk.cc"
void
impl_arithmetic_NegativeExpr::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 141 "unparse.k"
		const arithmetic arithm = this/**/;
#line 141 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 142 "unparse.k"
		if(expr->check==NUMB) { arithm->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1844 "unpk.cc"
	    }
	    break;
	}

#line  1849 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1862 "unpk.cc"
void
impl_arithmetic_PositiveExpr::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 135 "unparse.k"
		const arithmetic arithm = this/**/;
#line 135 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 136 "unparse.k"
		if(expr->check==NUMB) { arithm->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1879 "unpk.cc"
	    }
	    break;
	}

#line  1884 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1897 "unpk.cc"
void
impl_arithmeticWithoutInitializer_ExprNumber2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 224 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 224 "unparse.k"
		arithmInit->check=NUMB; fprintf(stdout,"\nNUMB!\n");
#line  1909 "unpk.cc"
	    }
	    break;
	}

#line  1914 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1927 "unpk.cc"
void
impl_arithmeticWithoutInitializer_ExprModuloWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 218 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 218 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 218 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 219 "unparse.k"
		if(exprInit->check==NUMB && expr2->check==NUMB) { arithmInit->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1947 "unpk.cc"
	    }
	    break;
	}

#line  1952 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1965 "unpk.cc"
void
impl_arithmeticWithoutInitializer_ExprDivisionWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 212 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 212 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 212 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 213 "unparse.k"
		if(exprInit->check==NUMB && expr2->check==NUMB) { arithmInit->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  1985 "unpk.cc"
	    }
	    break;
	}

#line  1990 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2003 "unpk.cc"
void
impl_arithmeticWithoutInitializer_ExprMultiplicationWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 206 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 206 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 206 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 207 "unparse.k"
		if(exprInit->check==NUMB && expr2->check==NUMB) { arithmInit->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  2023 "unpk.cc"
	    }
	    break;
	}

#line  2028 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2041 "unpk.cc"
void
impl_arithmeticWithoutInitializer_ExprSubtractionWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 200 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 200 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 200 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 201 "unparse.k"
		if(exprInit->check==NUMB && expr2->check==NUMB) { arithmInit->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  2061 "unpk.cc"
	    }
	    break;
	}

#line  2066 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2079 "unpk.cc"
void
impl_arithmeticWithoutInitializer_ExprAdditionWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 194 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 194 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 194 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 195 "unparse.k"
		if(exprInit->check==NUMB && expr2->check==NUMB) { arithmInit->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  2099 "unpk.cc"
	    }
	    break;
	}

#line  2104 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2117 "unpk.cc"
void
impl_arithmeticWithoutInitializer_NegativeExpr2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 188 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 188 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 189 "unparse.k"
		if(expr->check==NUMB) { arithmInit->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  2134 "unpk.cc"
	    }
	    break;
	}

#line  2139 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2152 "unpk.cc"
void
impl_arithmeticWithoutInitializer_PositiveExpr2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 182 "unparse.k"
		const arithmeticWithoutInitializer arithmInit = this/**/;
#line 182 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 183 "unparse.k"
		if(expr->check==NUMB) { arithmInit->check=NUMB; }
		else { yyerror("Non-arithmetic"); }

#line  2169 "unpk.cc"
	    }
	    break;
	}

#line  2174 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2187 "unpk.cc"
void
impl_logical_ExprFalse::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 251 "unparse.k"
		const logical logic = this/**/;
#line 252 "unparse.k"
		logic->check=BOOL; fprintf(stdout,"BOOL!\n"); 
#line  2199 "unpk.cc"
	    }
	    break;
	}

#line  2204 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  2216 "unpk.cc"
void
impl_logical_ExprTrue::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 247 "unparse.k"
		const logical logic = this/**/;
#line 248 "unparse.k"
		logic->check=BOOL; fprintf(stdout,"BOOL!\n"); 
#line  2228 "unpk.cc"
	    }
	    break;
	}

#line  2233 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  2245 "unpk.cc"
void
impl_logical_ExprOr::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 241 "unparse.k"
		const logical logic = this/**/;
#line 241 "unparse.k"
		const expression expr1 = this->expression_1;
#line 241 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 242 "unparse.k"
		if(expr1->check==BOOL && expr2->check==BOOL) { logic->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  2265 "unpk.cc"
	    }
	    break;
	}

#line  2270 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2283 "unpk.cc"
void
impl_logical_ExprAnd::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 235 "unparse.k"
		const logical logic = this/**/;
#line 235 "unparse.k"
		const expression expr1 = this->expression_1;
#line 235 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 236 "unparse.k"
		if(expr1->check==BOOL && expr2->check==BOOL) { logic->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  2303 "unpk.cc"
	    }
	    break;
	}

#line  2308 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2321 "unpk.cc"
void
impl_logical_NotExpr::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 229 "unparse.k"
		const logical logic = this/**/;
#line 229 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 230 "unparse.k"
		if(expr->check==BOOL) { logic->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  2338 "unpk.cc"
	    }
	    break;
	}

#line  2343 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2356 "unpk.cc"
void
impl_logicalWithoutInitializer_ExprFalse2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 279 "unparse.k"
		const logicalWithoutInitializer logicInit = this/**/;
#line 280 "unparse.k"
		logicInit->check=BOOL; fprintf(stdout,"\nBOOL!\n"); 
#line  2368 "unpk.cc"
	    }
	    break;
	}

#line  2373 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  2385 "unpk.cc"
void
impl_logicalWithoutInitializer_ExprTrue2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 275 "unparse.k"
		const logicalWithoutInitializer logicInit = this/**/;
#line 276 "unparse.k"
		logicInit->check=BOOL; fprintf(stdout,"\nBOOL!\n"); 
#line  2397 "unpk.cc"
	    }
	    break;
	}

#line  2402 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  2414 "unpk.cc"
void
impl_logicalWithoutInitializer_ExprOrWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 269 "unparse.k"
		const logicalWithoutInitializer logicInit = this/**/;
#line 269 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 269 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 270 "unparse.k"
		if(exprInit->check==BOOL && expr2->check==BOOL) { logicInit->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  2434 "unpk.cc"
	    }
	    break;
	}

#line  2439 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2452 "unpk.cc"
void
impl_logicalWithoutInitializer_ExprAndWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 263 "unparse.k"
		const logicalWithoutInitializer logicInit = this/**/;
#line 263 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 263 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 264 "unparse.k"
		if(exprInit->check==BOOL && expr2->check==BOOL) { logicInit->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  2472 "unpk.cc"
	    }
	    break;
	}

#line  2477 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2490 "unpk.cc"
void
impl_logicalWithoutInitializer_NotExpr2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 257 "unparse.k"
		const logicalWithoutInitializer logicInit = this/**/;
#line 257 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 258 "unparse.k"
		if(expr->check==BOOL) { logicInit->check=BOOL; }
		else { yyerror("Non-Bool"); }

#line  2507 "unpk.cc"
	    }
	    break;
	}

#line  2512 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2525 "unpk.cc"
void
impl_comparison_ExprGreaterOrEqual::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 330 "unparse.k"
		const comparison compare = this/**/;
#line 330 "unparse.k"
		const expression expr1 = this->expression_1;
#line 330 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 331 "unparse.k"
		if(expr1->check==expr2->check ||
		    (expr1->check==BOOL && expr2->check==NUMB) ||
		    (expr1->check==NUMB && expr2->check==BOOL)) 
		{ compare->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2548 "unpk.cc"
	    }
	    break;
	}

#line  2553 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2566 "unpk.cc"
void
impl_comparison_ExprLessOrEqual::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 321 "unparse.k"
		const comparison compare = this/**/;
#line 321 "unparse.k"
		const expression expr1 = this->expression_1;
#line 321 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 322 "unparse.k"
		if(expr1->check==expr2->check ||
		    (expr1->check==BOOL && expr2->check==NUMB) ||
		    (expr1->check==NUMB && expr2->check==BOOL)) 
		{ compare->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2589 "unpk.cc"
	    }
	    break;
	}

#line  2594 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2607 "unpk.cc"
void
impl_comparison_ExprGreaterThan::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 312 "unparse.k"
		const comparison compare = this/**/;
#line 312 "unparse.k"
		const expression expr1 = this->expression_1;
#line 312 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 313 "unparse.k"
		if(expr1->check==expr2->check ||
		    (expr1->check==BOOL && expr2->check==NUMB) ||
		    (expr1->check==NUMB && expr2->check==BOOL)) 
		{ compare->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2630 "unpk.cc"
	    }
	    break;
	}

#line  2635 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2648 "unpk.cc"
void
impl_comparison_ExprLessThan::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 303 "unparse.k"
		const comparison compare = this/**/;
#line 303 "unparse.k"
		const expression expr1 = this->expression_1;
#line 303 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 304 "unparse.k"
		if(expr1->check==expr2->check ||
		    (expr1->check==BOOL && expr2->check==NUMB) ||
		    (expr1->check==NUMB && expr2->check==BOOL)) 
		{ compare->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2671 "unpk.cc"
	    }
	    break;
	}

#line  2676 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2689 "unpk.cc"
void
impl_comparison_ExprNotEqual::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 294 "unparse.k"
		const comparison compare = this/**/;
#line 294 "unparse.k"
		const expression expr1 = this->expression_1;
#line 294 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 295 "unparse.k"
		if(expr1->check==expr2->check ||
		    (expr1->check==BOOL && expr2->check==NUMB) ||
		    (expr1->check==NUMB && expr2->check==BOOL)) 
		{ compare->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2712 "unpk.cc"
	    }
	    break;
	}

#line  2717 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2730 "unpk.cc"
void
impl_comparison_ExprEquivalent::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 285 "unparse.k"
		const comparison compare = this/**/;
#line 285 "unparse.k"
		const expression expr1 = this->expression_1;
#line 285 "unparse.k"
		const expression expr2 = this->expression_2;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 286 "unparse.k"
		if(expr1->check==expr2->check ||
		    (expr1->check==BOOL && expr2->check==NUMB) ||
		    (expr1->check==NUMB && expr2->check==BOOL)) 
		{ compare->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2753 "unpk.cc"
	    }
	    break;
	}

#line  2758 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2771 "unpk.cc"
void
impl_comparisonWithoutInitializer_ExprGreaterOrEqualWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 386 "unparse.k"
		const comparisonWithoutInitializer compareInit = this/**/;
#line 386 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 386 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 387 "unparse.k"
		if(exprInit->check==expr2->check ||
		    (exprInit->check==BOOL && expr2->check==NUMB) ||
		    (exprInit->check==NUMB && expr2->check==BOOL)) 
		{ compareInit->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2794 "unpk.cc"
	    }
	    break;
	}

#line  2799 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2812 "unpk.cc"
void
impl_comparisonWithoutInitializer_ExprLessOrEqualWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 377 "unparse.k"
		const comparisonWithoutInitializer compareInit = this/**/;
#line 377 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 377 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 378 "unparse.k"
		if(exprInit->check==expr2->check ||
		    (exprInit->check==BOOL && expr2->check==NUMB) ||
		    (exprInit->check==NUMB && expr2->check==BOOL)) 
		{ compareInit->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2835 "unpk.cc"
	    }
	    break;
	}

#line  2840 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2853 "unpk.cc"
void
impl_comparisonWithoutInitializer_ExprGreaterThanWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 368 "unparse.k"
		const comparisonWithoutInitializer compareInit = this/**/;
#line 368 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 368 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 369 "unparse.k"
		if(exprInit->check==expr2->check ||
		    (exprInit->check==BOOL && expr2->check==NUMB) ||
		    (exprInit->check==NUMB && expr2->check==BOOL)) 
		{ compareInit->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2876 "unpk.cc"
	    }
	    break;
	}

#line  2881 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2894 "unpk.cc"
void
impl_comparisonWithoutInitializer_ExprLessThanWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 359 "unparse.k"
		const comparisonWithoutInitializer compareInit = this/**/;
#line 359 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 359 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 360 "unparse.k"
		if(exprInit->check==expr2->check ||
		    (exprInit->check==BOOL && expr2->check==NUMB) ||
		    (exprInit->check==NUMB && expr2->check==BOOL)) 
		{ compareInit->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2917 "unpk.cc"
	    }
	    break;
	}

#line  2922 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2935 "unpk.cc"
void
impl_comparisonWithoutInitializer_ExprNotEqualWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 350 "unparse.k"
		const comparisonWithoutInitializer compareInit = this/**/;
#line 350 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 350 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 351 "unparse.k"
		if(exprInit->check==expr2->check ||
		    (exprInit->check==BOOL && expr2->check==NUMB) ||
		    (exprInit->check==NUMB && expr2->check==BOOL)) 
		{ compareInit->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2958 "unpk.cc"
	    }
	    break;
	}

#line  2963 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2976 "unpk.cc"
void
impl_comparisonWithoutInitializer_ExprEquivalentWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 341 "unparse.k"
		const comparisonWithoutInitializer compareInit = this/**/;
#line 341 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 341 "unparse.k"
		const expression expr2 = this->expression_1;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
#line 342 "unparse.k"
		if(exprInit->check==expr2->check ||
		    (exprInit->check==BOOL && expr2->check==NUMB) ||
		    (exprInit->check==NUMB && expr2->check==BOOL)) 
		{ compareInit->check=BOOL; }
		else { yyerror("Comparison between unmatchable types"); }

#line  2999 "unpk.cc"
	    }
	    break;
	}

#line  3004 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3017 "unpk.cc"
void
impl_leftvalue_LeftValDot::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 21 "unparse.k"
		const leftvalue leftval = this->leftvalue_1;
		kc::unparse(leftval, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  3032 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3045 "unpk.cc"
void
impl_leftvalue_LeftValBrackets::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3051 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3064 "unpk.cc"
void
impl_leftvalue_LeftValIdent::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
	    }
	    break;
	}

#line  3076 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3089 "unpk.cc"
void
impl_other_ExprAll::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3095 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3108 "unpk.cc"
void
impl_other_ExprOtherIf::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 408 "unparse.k"
		const other others = this/**/;
#line 408 "unparse.k"
		const expression expr1 = this->expression_1;
#line 408 "unparse.k"
		const expression expr2 = this->expression_2;
#line 408 "unparse.k"
		const expression expr3 = this->expression_3;
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
		kc::unparse(expr3, kc_printer, kc_current_view);
#line 409 "unparse.k"
		if(expr1->check!=BOOL) { yyerror("Non-Bool"); } 

#line  3130 "unpk.cc"
	    }
	    break;
	}

#line  3135 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3148 "unpk.cc"
void
impl_other_ExprCommaSeparated::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3154 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3167 "unpk.cc"
void
impl_other_ExprIdentExprInParenthesis::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 401 "unparse.k"
		const other others = this/**/;
#line 401 "unparse.k"
		const casestring string = this->casestring_1;
#line 401 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 402 "unparse.k"

#line  3184 "unpk.cc"
	    }
	    break;
	}

#line  3189 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3202 "unpk.cc"
void
impl_other_ExprIdentParenthesis::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 397 "unparse.k"
		const other others = this/**/;
#line 397 "unparse.k"
		const casestring string = this->casestring_1;
#line 398 "unparse.k"

#line  3216 "unpk.cc"
	    }
	    break;
	}

#line  3221 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3234 "unpk.cc"
void
impl_otherWithoutInitializer_ExprAll2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3240 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3253 "unpk.cc"
void
impl_otherWithoutInitializer_ExprOtherIfWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 429 "unparse.k"
		const otherWithoutInitializer othersInit = this/**/;
#line 429 "unparse.k"
		const expressionWithoutInitializer exprInit = this->expressionWithoutInitializer_1;
#line 429 "unparse.k"
		const expression expr2 = this->expression_1;
#line 429 "unparse.k"
		const expression expr3 = this->expression_2;
		kc::unparse(exprInit, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
		kc::unparse(expr3, kc_printer, kc_current_view);
#line 430 "unparse.k"
		if(exprInit->check!=BOOL) { yyerror("Non-Bool"); } 

#line  3275 "unpk.cc"
	    }
	    break;
	}

#line  3280 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3293 "unpk.cc"
void
impl_otherWithoutInitializer_ExprCommaSeparatedWithoutInitializer::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3299 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3312 "unpk.cc"
void
impl_otherWithoutInitializer_ExprIdentExprInParenthesis2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 422 "unparse.k"
		const otherWithoutInitializer othersInit = this/**/;
#line 422 "unparse.k"
		const casestring string = this->casestring_1;
#line 422 "unparse.k"
		const expression expr = this->expression_1;
		kc::unparse(expr, kc_printer, kc_current_view);
#line 423 "unparse.k"

#line  3329 "unpk.cc"
	    }
	    break;
	}

#line  3334 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3347 "unpk.cc"
void
impl_otherWithoutInitializer_ExprIdentParenthesis2::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 418 "unparse.k"
		const otherWithoutInitializer othersInit = this/**/;
#line 418 "unparse.k"
		const casestring string = this->casestring_1;
#line 419 "unparse.k"

#line  3361 "unpk.cc"
	    }
	    break;
	}

#line  3366 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3379 "unpk.cc"
void
impl_initializerList_ExprInBracesColon::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3385 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3398 "unpk.cc"
void
impl_initializerList_ExprInBraces::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3404 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3417 "unpk.cc"
void
impl_initializerList_Braces::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3423 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3435 "unpk.cc"
void
impl_expressionListColon_ExpressionListColon::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3441 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3454 "unpk.cc"
void
impl_expressionListColon_EmptyExpressionListColon::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3460 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3472 "unpk.cc"
void
impl_places_Places::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3478 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3491 "unpk.cc"
void
impl_optSafe_Safe::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3497 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3510 "unpk.cc"
void
impl_optSafe_EmptySafe::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3516 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3528 "unpk.cc"
void
impl_optNumber_PlaceNumber::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3534 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3547 "unpk.cc"
void
impl_optNumber_EmptyPlaceNumber::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3553 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3565 "unpk.cc"
void
impl_optType_PlaceTypeMultiset::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3571 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3584 "unpk.cc"
void
impl_optType_PlaceTypeInt::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3590 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3602 "unpk.cc"
void
impl_optType_PlaceTypeStruct::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3608 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3621 "unpk.cc"
void
impl_optType_PlaceTypeIntInterval::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3627 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3640 "unpk.cc"
void
impl_optType_PlaceTypeEnum::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 22 "unparse.k"
		const integer optNumb = this->integer_1;
#line 22 "unparse.k"
		const identList identL = this->identList_1;
		kc::unparse(optNumb, kc_printer, kc_current_view);
		kc::unparse(identL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  3658 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3671 "unpk.cc"
void
impl_optType_PlaceTypeBool::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3677 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3689 "unpk.cc"
void
impl_optType_EmptyPlaceType::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3695 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3707 "unpk.cc"
void
impl_place_PlaceWithTypeIdent::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
	    }
	    break;
	}

#line  3719 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3732 "unpk.cc"
void
impl_place_Place::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
	    }
	    break;
	}

#line  3744 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3757 "unpk.cc"
void
impl_commaPlaces_CommaPlaces::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3763 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3776 "unpk.cc"
void
impl_commaPlaces_EmptyCommaPlaces::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3782 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3794 "unpk.cc"
void
impl_morePlaces_MorePlaces::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3800 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3813 "unpk.cc"
void
impl_morePlaces_EmptyMorePlaces::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3819 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3831 "unpk.cc"
void
impl_marking_Marking::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 25 "unparse.k"
		const expression expr = this->expression_1;
#line 25 "unparse.k"
		const markingList markingL = this->markingList_1;
		kc::unparse(expr, kc_printer, kc_current_view);
		kc::unparse(markingL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  3849 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3862 "unpk.cc"
void
impl_marking_EmptyMarking::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3868 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3880 "unpk.cc"
void
impl_markingList_MarkingList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 26 "unparse.k"
		const expression expr = this->expression_1;
#line 26 "unparse.k"
		const markingList markingL = this->markingList_1;
		kc::unparse(expr, kc_printer, kc_current_view);
		kc::unparse(markingL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  3898 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3911 "unpk.cc"
void
impl_markingList_EmptyMarkingList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3917 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3929 "unpk.cc"
void
impl_transition_Transition::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 27 "unparse.k"
		const fairness fair = this->fairness_1;
#line 27 "unparse.k"
		const variable var = this->variable_1;
#line 27 "unparse.k"
		const guard optGuard = this->guard_1;
#line 27 "unparse.k"
		const optIdentExprList optIdentExprL1 = this->optIdentExprList_1;
#line 27 "unparse.k"
		const optIdentExprList optIdentExprL2 = this->optIdentExprList_2;
#line 27 "unparse.k"
		const transition transitions = this->transition_1;
		kc::unparse(fair, kc_printer, kc_current_view);
		kc::unparse(var, kc_printer, kc_current_view);
		kc::unparse(optGuard, kc_printer, kc_current_view);
		kc::unparse(optIdentExprL1, kc_printer, kc_current_view);
		kc::unparse(optIdentExprL2, kc_printer, kc_current_view);
		kc::unparse(transitions, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  3959 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  3972 "unpk.cc"
void
impl_transition_EmptyTransition::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3978 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  3990 "unpk.cc"
void
impl_fairness_StrongFair::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  3996 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4008 "unpk.cc"
void
impl_fairness_WeakFair::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4014 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4026 "unpk.cc"
void
impl_fairness_EmptyFairness::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4032 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4044 "unpk.cc"
void
impl_variable_Variable::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4050 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4063 "unpk.cc"
void
impl_variable_EmptyVariable::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4069 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4081 "unpk.cc"
void
impl_varOrArrayList_VarOrArrayList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4087 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4100 "unpk.cc"
void
impl_varOrArrayList_EmptyVarOrArrayList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4106 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4118 "unpk.cc"
void
impl_guard_Guard::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4124 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4137 "unpk.cc"
void
impl_guard_EmptyGuard::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4143 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4155 "unpk.cc"
void
impl_optIdentExprList_OptIdentExprList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 28 "unparse.k"
		const expression expr = this->expression_1;
#line 28 "unparse.k"
		const identExprList identExprL = this->identExprList_1;
		kc::unparse(expr, kc_printer, kc_current_view);
		kc::unparse(identExprL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  4173 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4186 "unpk.cc"
void
impl_optIdentExprList_EmptyOptIdentExprList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4192 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4204 "unpk.cc"
void
impl_identExprList_IdentExprList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 29 "unparse.k"
		const expression expr = this->expression_1;
#line 29 "unparse.k"
		const identExprList identExprL = this->identExprList_1;
		kc::unparse(expr, kc_printer, kc_current_view);
		kc::unparse(identExprL, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  4222 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4235 "unpk.cc"
void
impl_identExprList_EmptyIdentExprList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4241 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4253 "unpk.cc"
void
impl_block_Block::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4259 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4272 "unpk.cc"
void
impl_declarationOrStatement_DeclOrStatemStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4278 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4291 "unpk.cc"
void
impl_declarationOrStatement_DeclOrStatemDeclaration::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4297 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4310 "unpk.cc"
void
impl_declarationOrStatement_EmptyDeclarationOrStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4316 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4328 "unpk.cc"
void
impl_declaration_Declaration::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4334 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4347 "unpk.cc"
void
impl_statement_StatementReturn::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4353 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4366 "unpk.cc"
void
impl_statement_StatementContinue::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4372 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4384 "unpk.cc"
void
impl_statement_StatementBreak::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4390 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4402 "unpk.cc"
void
impl_statement_StatementSwitch::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4408 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4421 "unpk.cc"
void
impl_statement_StatementForAll::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 32 "unparse.k"
		const type type1 = this->type_1;
#line 32 "unparse.k"
		const type type2 = this->type_2;
		kc::unparse(type1, kc_printer, kc_current_view);
		kc::unparse(type2, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  4439 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4452 "unpk.cc"
void
impl_statement_StatementForIdentColon::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 31 "unparse.k"
		const expression expr = this->expression_1;
#line 31 "unparse.k"
		const statement statem = this->statement_1;
		kc::unparse(expr, kc_printer, kc_current_view);
		kc::unparse(statem, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  4470 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4483 "unpk.cc"
void
impl_statement_StatementForTypeExpr::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case typecheck_enum: {
	    typecheck_class& kc_current_view=static_cast<typecheck_class&>(kc_current_view_base);
	    {
#line 30 "unparse.k"
		const type typeS = this->type_1;
#line 30 "unparse.k"
		const expression expr1 = this->expression_1;
#line 30 "unparse.k"
		const expression expr2 = this->expression_2;
#line 30 "unparse.k"
		const expression expr3 = this->expression_3;
#line 30 "unparse.k"
		const statement statem = this->statement_1;
		kc::unparse(typeS, kc_printer, kc_current_view);
		kc::unparse(expr1, kc_printer, kc_current_view);
		kc::unparse(expr2, kc_printer, kc_current_view);
		kc::unparse(expr3, kc_printer, kc_current_view);
		kc::unparse(statem, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  4510 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4523 "unpk.cc"
void
impl_statement_StatementForExpr::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4529 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4542 "unpk.cc"
void
impl_statement_StatementDoWhile::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4548 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4561 "unpk.cc"
void
impl_statement_StatementWhile::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4567 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4580 "unpk.cc"
void
impl_statement_StatementIf::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4586 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4599 "unpk.cc"
void
impl_statement_StatementExprSemicolon::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4605 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4618 "unpk.cc"
void
impl_statement_StatementBlock::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4624 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4637 "unpk.cc"
void
impl_statement_StatementSemiolon::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4643 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4655 "unpk.cc"
void
impl_ifStatement_IfStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4661 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4674 "unpk.cc"
void
impl_optElse_OptElse::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4680 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4693 "unpk.cc"
void
impl_optElse_OptElseEmpty::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4699 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  4711 "unpk.cc"
void
impl_switchCase_SwitchDefault::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4717 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4730 "unpk.cc"
void
impl_switchCase_SwitchCase::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4736 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4749 "unpk.cc"
void
impl_switchCaseList_SwitchDefaultList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4755 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4768 "unpk.cc"
void
impl_switchCaseList_SwitchCaseList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4774 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  4787 "unpk.cc"
void
impl_switchCaseList_EmptySwitchCaseList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  4793 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


} // namespace kc
